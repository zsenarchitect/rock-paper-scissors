name: 🔍 Cleanup Check

on:
  schedule:
    - cron: '0 1 * * 0'  # Weekly on Sunday at 1 AM
  workflow_dispatch:
    inputs:
      check-type:
        description: 'Type of cleanup check to perform'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - debug-files
        - test-artifacts
        - old-branches
        - dependencies
        - cache

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Check for files that need cleanup
  check-files:
    name: 🔍 Check Files Status
    runs-on: ubuntu-latest
    if: github.event.inputs.check-type == 'all' || github.event.inputs.check-type == 'debug-files'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Analyze files that need cleanup
      id: analyze-files
      run: |
        echo "🔍 Analyzing files that may need cleanup..." >> $GITHUB_STEP_SUMMARY
        
        # Check for various file types that might need cleanup
        debug_files=$(find . -maxdepth 1 -name 'debug_*' -o -name '*.debug' 2>/dev/null | wc -l)
        log_files=$(find . -name '*.log' 2>/dev/null | wc -l)
        temp_files=$(find . -name '*.tmp' -o -name '*.temp' 2>/dev/null | wc -l)
        test_files=$(find . -name 'test_*' -o -name '*_test' 2>/dev/null | wc -l)
        
        echo "debug_files=$debug_files" >> $GITHUB_OUTPUT
        echo "log_files=$log_files" >> $GITHUB_OUTPUT
        echo "temp_files=$temp_files" >> $GITHUB_OUTPUT
        echo "test_files=$test_files" >> $GITHUB_OUTPUT
        
        total_files=$((debug_files + log_files + temp_files + test_files))
        echo "total_files=$total_files" >> $GITHUB_OUTPUT
        
        if [ $total_files -gt 0 ]; then
          echo "cleanup-needed=true" >> $GITHUB_OUTPUT
          echo "❌ Repository is NOT clean - $total_files files found:" >> $GITHUB_STEP_SUMMARY
          echo "- Debug files: $debug_files" >> $GITHUB_STEP_SUMMARY
          echo "- Log files: $log_files" >> $GITHUB_STEP_SUMMARY
          echo "- Temp files: $temp_files" >> $GITHUB_STEP_SUMMARY
          echo "- Test files: $test_files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 WORKFLOW FAILED: Repository needs cleanup!" >> $GITHUB_STEP_SUMMARY
        else
          echo "cleanup-needed=false" >> $GITHUB_OUTPUT
          echo "✅ Repository is clean - no cleanup needed" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📋 Generate file analysis report
      run: |
        echo "📋 Generating file analysis report..." >> $GITHUB_STEP_SUMMARY
        
        # Create detailed file analysis
        cat > file-analysis-report.md << 'EOF'
        # 🔍 File Analysis Report
        
        **Generated:** $(date)  
        **Workflow:** $GITHUB_WORKFLOW  
        **Run ID:** $GITHUB_RUN_ID  
        **Check Type:** ${{ github.event.inputs.check-type || 'all' }}  
        
        ## 📊 File Analysis Summary
        
        - **Debug files found:** ${{ steps.analyze-files.outputs.debug_files }}
        - **Log files found:** ${{ steps.analyze-files.outputs.log_files }}
        - **Temp files found:** ${{ steps.analyze-files.outputs.temp_files }}
        - **Test files found:** ${{ steps.analyze-files.outputs.test_files }}
        - **Total files needing review:** ${{ steps.analyze-files.outputs.total_files }}
        
        ## 🔍 Detailed File Listing
        
        ### Debug Files
        ```
        $(find . -name 'debug_*' -o -name '*.debug' 2>/dev/null | head -20)
        ```
        
        ### Log Files
        ```
        $(find . -name '*.log' 2>/dev/null | head -20)
        ```
        
        ### Temp Files
        ```
        $(find . -name '*.tmp' -o -name '*.temp' 2>/dev/null | head -20)
        ```
        
        ### Test Files
        ```
        $(find . -name 'test_*' -o -name '*_test' 2>/dev/null | head -20)
        ```
        
        ## 💡 Recommendations
        
        - Review debug files and remove if no longer needed
        - Archive or remove old log files
        - Clean up temporary files
        - Organize test files in appropriate directories
        
        ---
        
        *Generated by Cleanup Check Workflow*
        EOF
        
        echo "✅ File analysis report generated" >> $GITHUB_STEP_SUMMARY
        
    - name: 🚨 Fail if cleanup needed
      if: steps.analyze-files.outputs.cleanup-needed == 'true'
      run: |
        echo "🚨 Repository is not clean - failing workflow!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🗑️ Files that need cleanup:" >> $GITHUB_STEP_SUMMARY
        
        # Debug files
        debug_files=$(find . -name 'debug_*' -o -name '*.debug' 2>/dev/null)
        if [ -n "$debug_files" ]; then
          echo "### Debug Files:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$debug_files" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Log files
        log_files=$(find . -name '*.log' 2>/dev/null)
        if [ -n "$log_files" ]; then
          echo "### Log Files:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$log_files" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Temp files
        temp_files=$(find . -name '*.tmp' -o -name '*.temp' 2>/dev/null)
        if [ -n "$temp_files" ]; then
          echo "### Temporary Files:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$temp_files" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Test files in root
        test_files=$(find . -maxdepth 1 -name 'test_*' -o -name '*_test' 2>/dev/null)
        if [ -n "$test_files" ]; then
          echo "### Test Files in Root Directory:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$test_files" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 💡 Action Required:" >> $GITHUB_STEP_SUMMARY
        echo "Please clean up these files before the workflow can pass." >> $GITHUB_STEP_SUMMARY
        
        # Also print to console for immediate visibility
        echo "🚨 Repository is not clean - failing workflow!"
        echo "Debug files: ${{ steps.analyze-files.outputs.debug_files }}"
        echo "Log files: ${{ steps.analyze-files.outputs.log_files }}"
        echo "Temp files: ${{ steps.analyze-files.outputs.temp_files }}"
        echo "Test files: ${{ steps.analyze-files.outputs.test_files }}"
        echo "Total files needing cleanup: ${{ steps.analyze-files.outputs.total_files }}"
        exit 1
        
    - name: 📊 Upload file analysis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: file-analysis-report
        path: file-analysis-report.md
        retention-days: 30

  # Check test artifacts and old builds
  check-artifacts:
    name: 🧪 Check Test Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.check-type == 'all' || github.event.inputs.check-type == 'test-artifacts'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧪 Analyze test artifacts
      id: analyze-artifacts
      run: |
        echo "🧪 Analyzing test artifacts..." >> $GITHUB_STEP_SUMMARY
        
        # Check for Python cache files
        pyc_files=$(find . -name "*.pyc" 2>/dev/null | wc -l)
        pycache_dirs=$(find . -name "__pycache__" -type d 2>/dev/null | wc -l)
        pytest_cache=$(find . -name ".pytest_cache" -type d 2>/dev/null | wc -l)
        coverage_files=$(find . -name "coverage.xml" -o -name ".coverage" 2>/dev/null | wc -l)
        
        # Check for old temp files
        old_temp_files=0
        if [ -d "temp" ]; then
          old_temp_files=$(find temp -type f -mtime +7 2>/dev/null | wc -l)
        fi
        
        # Check for old debug files
        old_debug_files=0
        if [ -d "DEBUG" ]; then
          old_debug_files=$(find DEBUG -type f -mtime +30 2>/dev/null | wc -l)
        fi
        
        echo "pyc_files=$pyc_files" >> $GITHUB_OUTPUT
        echo "pycache_dirs=$pycache_dirs" >> $GITHUB_OUTPUT
        echo "pytest_cache=$pytest_cache" >> $GITHUB_OUTPUT
        echo "coverage_files=$coverage_files" >> $GITHUB_OUTPUT
        echo "old_temp_files=$old_temp_files" >> $GITHUB_OUTPUT
        echo "old_debug_files=$old_debug_files" >> $GITHUB_OUTPUT
        
        total_artifacts=$((pyc_files + pycache_dirs + pytest_cache + coverage_files + old_temp_files + old_debug_files))
        echo "total_artifacts=$total_artifacts" >> $GITHUB_OUTPUT
        
        if [ $total_artifacts -gt 0 ]; then
          echo "cleanup-needed=true" >> $GITHUB_OUTPUT
          echo "❌ Test artifacts found - $total_artifacts items need cleanup:" >> $GITHUB_STEP_SUMMARY
          echo "- Python cache files (.pyc): $pyc_files" >> $GITHUB_STEP_SUMMARY
          echo "- Python cache directories (__pycache__): $pycache_dirs" >> $GITHUB_STEP_SUMMARY
          echo "- Pytest cache directories: $pytest_cache" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage files: $coverage_files" >> $GITHUB_STEP_SUMMARY
          echo "- Old temp files (>7 days): $old_temp_files" >> $GITHUB_STEP_SUMMARY
          echo "- Old debug files (>30 days): $old_debug_files" >> $GITHUB_STEP_SUMMARY
        else
          echo "cleanup-needed=false" >> $GITHUB_OUTPUT
          echo "✅ No test artifacts found - repository is clean" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 🚨 Fail if artifacts found
      if: steps.analyze-artifacts.outputs.cleanup-needed == 'true'
      run: |
        echo "🚨 Test artifacts found - failing workflow!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🧪 Test Artifacts that need cleanup:" >> $GITHUB_STEP_SUMMARY
        
        # Python cache files
        if [ ${{ steps.analyze-artifacts.outputs.pyc_files }} -gt 0 ]; then
          echo "### Python Cache Files (.pyc):" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find . -name "*.pyc" 2>/dev/null >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Python cache directories
        if [ ${{ steps.analyze-artifacts.outputs.pycache_dirs }} -gt 0 ]; then
          echo "### Python Cache Directories (__pycache__):" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find . -name "__pycache__" -type d 2>/dev/null >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Coverage files
        if [ ${{ steps.analyze-artifacts.outputs.coverage_files }} -gt 0 ]; then
          echo "### Coverage Files:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find . -name "coverage.xml" -o -name ".coverage" 2>/dev/null >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 💡 Action Required:" >> $GITHUB_STEP_SUMMARY
        echo "Please clean up these test artifacts before the workflow can pass." >> $GITHUB_STEP_SUMMARY
        
        echo "🚨 Test artifacts found - failing workflow!"
        echo "Total artifacts: ${{ steps.analyze-artifacts.outputs.total_artifacts }}"
        exit 1


  # Generate cleanup check report
  cleanup-report:
    name: 📋 Cleanup Check Report
    runs-on: ubuntu-latest
    needs: [check-files, check-artifacts]
    if: always()
    
    steps:
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      if: always()
      
    - name: 📋 Generate cleanup check report
      run: |
        echo "# 🔍 Cleanup Check Report" > cleanup-check-report.md
        echo "" >> cleanup-check-report.md
        echo "**Date:** $(date)" >> cleanup-check-report.md
        echo "**Trigger:** ${{ github.event_name }}" >> cleanup-check-report.md
        echo "**Check Type:** ${{ github.event.inputs.check-type || 'all' }}" >> cleanup-check-report.md
        echo "" >> cleanup-check-report.md
        echo "## Check Results" >> cleanup-check-report.md
        echo "- File Check: ${{ needs.check-files.result }}" >> cleanup-check-report.md
        echo "- Artifact Check: ${{ needs.check-artifacts.result }}" >> cleanup-check-report.md
        echo "" >> cleanup-check-report.md
        
        if [ "${{ needs.check-files.result }}" = "success" ] && [ "${{ needs.check-artifacts.result }}" = "success" ]; then
          echo "## ✅ Repository Status: CLEAN" >> cleanup-check-report.md
          echo "The repository passed all cleanup checks. No action required." >> cleanup-check-report.md
        else
          echo "## ❌ Repository Status: NOT CLEAN" >> cleanup-check-report.md
          echo "The repository failed cleanup checks. Please review the failed checks above and clean up the identified files." >> cleanup-check-report.md
        fi
        
        echo "" >> cleanup-check-report.md
        echo "## Next Check" >> cleanup-check-report.md
        echo "Scheduled for next Sunday at 1 AM UTC" >> cleanup-check-report.md
        
    - name: 📊 Upload cleanup check report
      uses: actions/upload-artifact@v4
      with:
        name: cleanup-check-report
        path: cleanup-check-report.md
        retention-days: 30

  # Notify on cleanup check completion
  notify-cleanup-check:
    name: 📢 Notify Cleanup Check
    runs-on: ubuntu-latest
    needs: [cleanup-report]
    if: always()
    
    steps:
    - name: ✅ Success notification
      if: ${{ needs.cleanup-report.result == 'success' }}
      run: |
        echo "🎉 Cleanup check completed successfully!"
        echo "Repository is clean - no action required."
        
    - name: ❌ Failure notification
      if: ${{ needs.cleanup-report.result == 'failure' }}
      run: |
        echo "❌ Cleanup check failed!"
        echo "Repository is not clean - please review and clean up the identified files."
        echo "Check the workflow logs for detailed information about what needs to be cleaned."
        exit 1
