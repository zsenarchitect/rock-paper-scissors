name: 🧹 Automated Cleanup & Maintenance

on:
  schedule:
    - cron: '0 1 * * 0'  # Weekly on Sunday at 1 AM
  workflow_dispatch:
    inputs:
      cleanup-type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - debug-files
        - test-artifacts
        - old-branches
        - dependencies
        - cache

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Clean up debug and temporary files
  cleanup-files:
    name: 🗑️ Clean Up Files
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'all' || github.event.inputs.cleanup-type == 'debug-files'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧹 Run cleanup script
      run: |
        echo "🧹 Starting cleanup process..." >> $GITHUB_STEP_SUMMARY
        chmod +x cleanup.sh
        
        # Create cleanup log
        echo "Starting automated cleanup..." > cleanup-execution.log
        echo "Timestamp: $(date)" >> cleanup-execution.log
        echo "Cleanup type: ${{ github.event.inputs.cleanup-type || 'all' }}" >> cleanup-execution.log
        echo "Repository: $GITHUB_REPOSITORY" >> cleanup-execution.log
        echo "Branch: $GITHUB_REF_NAME" >> cleanup-execution.log
        echo "" >> cleanup-execution.log
        
        # Run cleanup with detailed logging
        ./cleanup.sh 2>&1 | tee -a cleanup-execution.log || true
        
        echo "✅ Cleanup script completed" >> $GITHUB_STEP_SUMMARY
        
    - name: 📊 Report cleanup results
      run: |
        echo "📊 Generating cleanup report..." >> $GITHUB_STEP_SUMMARY
        
        # Create cleanup report
        cat > cleanup-report.md << EOF
# 🧹 Cleanup Report

**Generated:** $(date)  
**Workflow:** $GITHUB_WORKFLOW  
**Run ID:** $GITHUB_RUN_ID  
**Cleanup Type:** ${{ github.event.inputs.cleanup-type || 'all' }}  

## 📋 Cleanup Summary

### Files Cleaned
- Debug files cleaned
- Test files organized  
- Temporary files removed
- Root directory organized

### Directory Structure
\`\`\`
$(find . -type d -name "DEBUG" -o -name "temp" -o -name "logs" | head -20)
\`\`\`

### File Counts
- **Total files:** $(find . -type f | wc -l)
- **Debug files:** $(find . -name "debug_*" -o -name "*.debug" | wc -l)
- **Test files:** $(find . -name "test_*" -o -name "*_test" | wc -l)
- **Log files:** $(find . -name "*.log" | wc -l)

### Disk Usage
\`\`\`
$(du -sh . 2>/dev/null || echo "Unknown")
\`\`\`

## 🔍 Detailed Logs

\`\`\`
$(head -50 cleanup-execution.log)
\`\`\`

---

*Generated by Automated Cleanup Workflow*
EOF
        
        echo "✅ Cleanup report generated" >> $GITHUB_STEP_SUMMARY
        
    - name: 📊 Upload cleanup reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cleanup-reports
        path: |
          cleanup-execution.log
          cleanup-report.md
        retention-days: 30

  # Clean up test artifacts and old builds
  cleanup-artifacts:
    name: 🧪 Clean Up Test Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'all' || github.event.inputs.cleanup-type == 'test-artifacts'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧪 Clean up test artifacts
      run: |
        # Remove old test files
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "coverage.xml" -delete
        find . -name ".coverage" -delete
        
        # Clean up temp directory
        if [ -d "temp" ]; then
          find temp -type f -mtime +7 -delete 2>/dev/null || true
          echo "Cleaned up old temp files"
        fi
        
        # Clean up DEBUG directory
        if [ -d "DEBUG" ]; then
          find DEBUG -type f -mtime +30 -delete 2>/dev/null || true
          echo "Cleaned up old debug files"
        fi
        
    - name: 📊 Report artifact cleanup
      run: |
        echo "🧪 Test artifacts cleaned:"
        echo "- Python cache files removed"
        echo "- Old test files deleted"
        echo "- Coverage files cleaned"
        echo "- Temp files older than 7 days removed"
        echo "- Debug files older than 30 days removed"

  # Clean up old branches
  cleanup-branches:
    name: 🌿 Clean Up Old Branches
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'all' || github.event.inputs.cleanup-type == 'old-branches'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🌿 List old branches
      run: |
        echo "🌿 Checking for old branches..."
        
        # Get list of branches
        git branch -r --format='%(refname:short)' | grep -v 'origin/main' | grep -v 'origin/develop' > branches.txt
        
        if [ -s branches.txt ]; then
          echo "Found branches:"
          cat branches.txt
          
          # Check last commit date for each branch
          while read branch; do
            if [ "$branch" != "origin/main" ] && [ "$branch" != "origin/develop" ]; then
              last_commit=$(git log -1 --format="%ci" "$branch" 2>/dev/null)
              if [ -n "$last_commit" ]; then
                echo "Branch $branch last commit: $last_commit"
              fi
            fi
          done < branches.txt
        else
          echo "No old branches found"
        fi
        
    - name: 📊 Report branch status
      run: |
        echo "🌿 Branch cleanup analysis completed"
        echo "Note: Manual review required before deleting branches"

  # Update and clean dependencies
  cleanup-dependencies:
    name: 📦 Clean Up Dependencies
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'all' || github.event.inputs.cleanup-type == 'dependencies'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Check Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
        # Check for outdated packages
        pip list --outdated --format=json > outdated-packages.json
        
        # Check for unused packages
        pip install pip-autoremove
        pip-autoremove --dry-run > unused-packages.txt || true
        
        echo "📦 Python dependency analysis completed"
        
    - name: 📦 Check Node.js dependencies
      run: |
        cd docs
        npm init -y
        npm install
        npm outdated --json > ../npm-outdated.json || true
        echo "📦 Node.js dependency analysis completed"
        
    - name: 📊 Report dependency status
      run: |
        echo "📦 Dependency cleanup analysis:"
        if [ -f "outdated-packages.json" ]; then
          echo "- Outdated Python packages identified"
        fi
        if [ -f "unused-packages.txt" ]; then
          echo "- Unused Python packages identified"
        fi
        if [ -f "npm-outdated.json" ]; then
          echo "- Outdated Node.js packages identified"
        fi

  # Clean up GitHub Actions cache
  cleanup-cache:
    name: 💾 Clean Up Cache
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'all' || github.event.inputs.cleanup-type == 'cache'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 💾 Clean up Python cache
      run: |
        python -m pip cache purge
        echo "Python pip cache cleared"
        
    - name: 💾 Clean up Node.js cache
      run: |
        npm cache clean --force
        echo "Node.js npm cache cleared"
        
    - name: 💾 Clean up system cache
      run: |
        sudo apt-get clean
        sudo apt-get autoclean
        echo "System cache cleared"

  # Generate cleanup report
  cleanup-report:
    name: 📋 Cleanup Report
    runs-on: ubuntu-latest
    needs: [cleanup-files, cleanup-artifacts, cleanup-branches, cleanup-dependencies, cleanup-cache]
    if: always()
    
    steps:
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v3
      if: always()
      
    - name: 📋 Generate cleanup report
      run: |
        echo "# 🧹 Automated Cleanup Report" > cleanup-report.md
        echo "" >> cleanup-report.md
        echo "**Date:** $(date)" >> cleanup-report.md
        echo "**Trigger:** ${{ github.event_name }}" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "## Cleanup Results" >> cleanup-report.md
        echo "- File Cleanup: ${{ needs.cleanup-files.result }}" >> cleanup-report.md
        echo "- Artifact Cleanup: ${{ needs.cleanup-artifacts.result }}" >> cleanup-report.md
        echo "- Branch Cleanup: ${{ needs.cleanup-branches.result }}" >> cleanup-report.md
        echo "- Dependency Cleanup: ${{ needs.cleanup-dependencies.result }}" >> cleanup-report.md
        echo "- Cache Cleanup: ${{ needs.cleanup-cache.result }}" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "## Recommendations" >> cleanup-report.md
        echo "1. Review outdated dependencies and update if needed" >> cleanup-report.md
        echo "2. Consider deleting old branches that are no longer needed" >> cleanup-report.md
        echo "3. Monitor disk usage and clean up large files" >> cleanup-report.md
        echo "4. Set up automated cleanup schedules" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "## Next Cleanup" >> cleanup-report.md
        echo "Scheduled for next Sunday at 1 AM UTC" >> cleanup-report.md
        
    - name: 📊 Upload cleanup report
      uses: actions/upload-artifact@v3
      with:
        name: cleanup-report
        path: cleanup-report.md
        retention-days: 30

  # Notify on cleanup completion
  notify-cleanup:
    name: 📢 Notify Cleanup
    runs-on: ubuntu-latest
    needs: [cleanup-report]
    if: always()
    
    steps:
    - name: ✅ Success notification
      if: ${{ needs.cleanup-report.result == 'success' }}
      run: |
        echo "🎉 Automated cleanup completed successfully!"
        echo "All cleanup tasks have been executed."
        
    - name: ❌ Failure notification
      if: ${{ needs.cleanup-report.result == 'failure' }}
      run: |
        echo "❌ Some cleanup tasks failed!"
        echo "Check the logs for details."
        exit 1
